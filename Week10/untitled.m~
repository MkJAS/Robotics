close all;
clear all;
clf;
clc

%% Manipulability measure

disp('The measure of manipularity is used to tell how much the cartesian EE can move at a given joint state')
disp('Manipulability measures the surface area of the velocity ellipsoid = false');
disp('the velocity ellipsoid indicates how fast the end-effector can move in different directions');
disp('the damping coefficient in damped least squares should be as small as possible to avoid end effector error=true');

%% Collision Detection Line (basic)

DoF = 4;
triangles = 40;
collisionChecksRequired = DoF*triangles

%% Collision detection line (harder)

mdl_planar3;

[v,f,fn] = RectangularPrism([2,-1.1,-1], [3,1.1,1]);
steps = 50;
q1 = [pi/3,0,0]; 
q2 = [-pi/3,0,0];

hold on
qMatrix = jtraj(q1,q2,steps);
for i = 1:steps
    result = IsCollision(p3,qMatrix(i,:),f,v,fn);
    if result == 1
        qMatrix(i,:)
        p3.plot(q1);
        pause(3);
        p3.animate(qMatrix(1:i,:));
        break
    end 
end 


%% Collision detection Points

centerPoint = [0,0,0]; %%%%%%%%%%% CHANGE %%%%%%%%%%%
radii = [1.1,1.1,1.1]; %%%%%%%%%%% CHANGE %%%%%%%%%%%
[X,Y] = meshgrid(-5:0.1:5,-5:0.1:5); Z = X; %%%%%%%%%%% CHANGE %%%%%%%%%%%

[x y z] = ellipsoid( centerPoint(1), centerPoint(2), centerPoint(3), radii(1), radii(2), radii(3) ); 
robotEllipsoid = surf(x, y, z);
alpha(robotEllipsoid, 0.5)
hold on
surface = surf(X, Y, Z);
axis equal
% axis([-150 150 -150 150 -150 150])
points = [X(:),Y(:),Z(:)];
algebraicDist = ((points(:,1)-centerPoint(1))/radii(1)).^2 ...
              + ((points(:,2)-centerPoint(2))/radii(2)).^2 ...
              + ((points(:,3)-centerPoint(3))/radii(3)).^2;
pointsInside = find(algebraicDist < 1); %%%%%%%%%%% CHANGE %%%%%%%%%%%
display(['There are ', num2str(size(pointsInside,1)),' points inside']);

%% Near singularity 6DoF

mdl_puma560;
q = [0 1.5708 -3.0159 0.1466 0.5585 0] 
% q = [0 0.01 0 0 0 0]
% q = [0 2.1677 -2.7332 0 -0.9425 0]
% q = [0 0.7854 3.1416 0 0.7854 0]

J = p560.jacob0(q);
m = sqrt(det(J*J')) % the smaller, the closer to singularity
t = abs(J) * abs(inv(J)); 
y=max(max(t)) % the bigger, the closer to singularity

%% Near Singularity 3Dof Planar

mdl_planar3;

% q = [0 1.5708 -1.5708];
% q = [0.5 0.5 0.5];
% q = [0 -0.7854 -0.7854];
q = [0.65 0.11 -0.1];  
Ja = p3.jacob0(q);
J = Ja(1:2, :);
m = sqrt(det(J*J')) % the smaller this value is, the closer the EE is to a singularity
t = abs(J) * abs(pinv(J)); 
max(max(t)) % the bigger, the closer to singularity

%% Resolved motion rate control

disp("A robotic system is REDUNDANT if the Jacobian has MORE COLUMNS THAN ROWS")
disp("Near SINGULAR CONFIGURATIONS, solutions for joint velocities grow to INFINITY")
disp("The Jacobian indicates how the end-effector will move as a function of the current joint state")

%% Optimisation

disp ("Damp least squares Q: the damping coefficient in DLS should be as small as possible to avoid end-effector error   Answer:TRUE")
disp ("The velocity ellipsoid indicates how fast the end-effector can move to different orientations (roll, pitch, yaw)  Answer:FALSE")

%% Distance Sense Distance to Puma End Effector

clear all;
mdl_puma560

q = deg2rad([0, 45, -80, 0, 45, 0]);
ee = p560.fkine(q);
cam = transl(-0.2008,-0.15,1.863);
final = inv(ee)*cam;
norm(final(1:3,4))

%% QExtra: Visual Servoing (IBVS)

r = UR10(); 
qt =  [1.6; -1; -1.2; -0.5; 0; 0];
focal = 0.08;
pixel = 10e-5;
resolution = [1024 1024];
centre = [512 512];
pStar =  [700 300 300 700; 300 300 700 700]; 
P=[2,2,2,2; -0.4,0.4,0.4,-0.4; 1.4,1.4,0.6,0.6]; 

q = qt';
cam = CentralCamera('focal', focal, 'pixel', pixel, 'resolution', resolution, 'centre', centre, 'name','UR10camera'); 
Tc0 = r.model.fkine(q);
cam.T = Tc0;
uv = cam.plot(P);
e = pStar - uv
round(e)

%% IsIntersectionPointInsideTriangle
% Given a point which is known to be on the same plane as the triangle, determine if the point is 
% inside (result == 1) or 
% outside a triangle (result ==0 )
function result = IsIntersectionPointInsideTriangle(intersectP,triangleVerts)

u = triangleVerts(2,:) - triangleVerts(1,:);
v = triangleVerts(3,:) - triangleVerts(1,:);

uu = dot(u,u);
uv = dot(u,v);
vv = dot(v,v);

w = intersectP - triangleVerts(1,:);
wu = dot(w,u);
wv = dot(w,v);

D = uv * uv - uu * vv;

% Get and test parametric coords (s and t)
s = (uv * wv - vv * wu) / D;
if (s < 0.0 || s > 1.0)        % intersectP is outside Triangle
    result = 0;
    return;
end

t = (uv * wu - uu * wv) / D;
if (t < 0.0 || (s + t) > 1.0)  % intersectP is outside Triangle
    result = 0;
    return;
end

result = 1;                      % intersectP is in Triangle
end

%% IsCollision
% This is based upon the output of questions 2.5 and 2.6
% Given a robot model (robot), and trajectory (i.e. joint state vector) (qMatrix)
% and triangle obstacles in the environment (faces,vertex,faceNormals)
function result = IsCollision(robot,qMatrix,faces,vertex,faceNormals,returnOnceFound)
if nargin < 6
    returnOnceFound = true;
end
result = false;

for qIndex = 1:size(qMatrix,1)
    % Get the transform of every joint (i.e. start and end of every link)
    tr = GetLinkPoses(qMatrix(qIndex,:), robot);

    % Go through each link and also each triangle face
    for i = 1 : size(tr,3)-1    
        for faceIndex = 1:size(faces,1)
            vertOnPlane = vertex(faces(faceIndex,1)',:);
            [intersectP,check] = LinePlaneIntersection(faceNormals(faceIndex,:),vertOnPlane,tr(1:3,4,i)',tr(1:3,4,i+1)'); 
            if check == 1 && IsIntersectionPointInsideTriangle(intersectP,vertex(faces(faceIndex,:)',:))
                plot3(intersectP(1),intersectP(2),intersectP(3),'g*');
                display('Intersection');
                result = true;
                if returnOnceFound
                    return
                end
            end
        end    
    end
end
end

%% GetLinkPoses
% q - robot joint angles
% robot -  seriallink robot model
% transforms - list of transforms
function [ transforms ] = GetLinkPoses( q, robot)

links = robot.links;
transforms = zeros(4, 4, length(links) + 1);
transforms(:,:,1) = robot.base;

for i = 1:length(links)
    L = links(1,i);
    
    current_transform = transforms(:,:, i);
    
    current_transform = current_transform * trotz(q(1,i) + L.offset) * ...
    transl(0,0, L.d) * transl(L.a,0,0) * trotx(L.alpha);
    transforms(:,:,i + 1) = current_transform;
end
end

%% FineInterpolation
% Use results from Q2.6 to keep calling jtraj until all step sizes are
% smaller than a given max steps size
function qMatrix = FineInterpolation(q1,q2,maxStepRadians)
if nargin < 3
    maxStepRadians = deg2rad(1);
end
    
steps = 2;
while ~isempty(find(maxStepRadians < abs(diff(jtraj(q1,q2,steps))),1))
    steps = steps + 1;
end
qMatrix = jtraj(q1,q2,steps);
end

%% InterpolateWaypointRadians
% Given a set of waypoints, finely intepolate them
function qMatrix = InterpolateWaypointRadians(waypointRadians,maxStepRadians)
if nargin < 2
    maxStepRadians = deg2rad(1);
end

qMatrix = [];
for i = 1: size(waypointRadians,1)-1
    qMatrix = [qMatrix ; FineInterpolation(waypointRadians(i,:),waypointRadians(i+1,:),maxStepRadians)]; %#ok<AGROW>
end
end
